AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  mms

  Sample SAM Template for mms

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 5

Resources:
  ApiCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: api.eick.com
      ValidationMethod: DNS

  # MyPhotoApi:
  #   Type: AWS::Serverless::Api
  #   Properties:
  #     StageName: Prod

  PhotoApiFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: photoapi/
      Handler: photoapi
      Runtime: go1.x
      Tracing: Active # https://docs.aws.amazon.com/lambda/latest/dg/lambda-x-ray.html
      Events:
        CatchAll:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            # RestApiId: !Ref MyPhotoApi
            Path: /photoapi/{list}
            Method: GET
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          PARAM1: VALUE
      Policies:
        - AmazonDynamoDBFullAccess
        - AmazonS3FullAccess

  ShuffleFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: shuffle/
      Handler: shuffle
      Runtime: go1.x
      Tracing: Active
      Timeout: 300 # 10 minutes (Maximum 900 seconds)
      Events:
        S3Event:
          Type: S3
          Properties:
            Bucket: !Ref MyMediaBucket
            Events: s3:ObjectCreated:*
      Policies:
        - AmazonDynamoDBFullAccess
        - AmazonS3FullAccess
        - AmazonRekognitionFullAccess

  PhotographTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: photograph
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: Name
          AttributeType: S
        - AttributeName: CaptureTime
          AttributeType: S
        - AttributeName: CaptureYear
          AttributeType: S
        - AttributeName: CaptureYearMonth
          AttributeType: S
        - AttributeName: CaptureYearMonthDay
          AttributeType: S

      KeySchema:
        - AttributeName: Name
          KeyType: HASH

      GlobalSecondaryIndexes:
        - IndexName: CaptureTimeIndex
          KeySchema:
            - AttributeName: CaptureTime
              KeyType: HASH
          Projection:
            ProjectionType: ALL

        - IndexName: CaptureYearIndex
          KeySchema:
            - AttributeName: CaptureYear
              KeyType: HASH
            - AttributeName: CaptureTime
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

        - IndexName: CaptureYearMonthIndex
          KeySchema:
            - AttributeName: CaptureYearMonth
              KeyType: HASH
            - AttributeName: CaptureTime
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

        - IndexName: CaptureYearMonthDayIndex
          KeySchema:
            - AttributeName: CaptureYearMonthDay
              KeyType: HASH
            - AttributeName: CaptureTime
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  MyMediaBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: media-input-eick-com
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  MyMediaOutputBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: media-output-eick-com
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  MyPhotosBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: photos-eick-com
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  PhotoAPI:
    Description: "API Gateway endpoint URL for Prod environment for First Function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/photoapi/"
  PhotoApiFunction:
    Description: "First Lambda Function ARN"
    Value: !GetAtt PhotoApiFunction.Arn
  PhotoApiFunctionIamRole:
    Description: "Implicit IAM Role created for PhotoApi World function"
    Value: !GetAtt PhotoApiFunctionRole.Arn
